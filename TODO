* Add one spec for each freeze-able literal object, where it generates
  SQL from a frozen instance (String, Date, DateTime, Class, etc)
  * Some objects, like DateTime, cache data in local ivars so they will
    explode when SQL is generated from them.
    * Generally the approach to fix this, when it does happen, is to dup
      the value prior to generating the SQL from it. However we only want
      to perform this dup on a frozen object, since it's generally
      wasteful in the common-case.

* Add integration specs that compose unary operations out of others
  * Try to do things like visit:

      base_relation.restrict { |r| r[:id].eq(1) }.order.limit(10).restrict { |r| r[:name].eq('Dan Kubb) }.limit(1)

    This should result in a nested SQL query, something equivalent to:

      SELECT * FROM (SELECT * FROM users WHERE id = 1 LIMIT 10 ORDER BY id, name) WHERE name = 'Dan Kubb' LIMIT 1

    NOTE: also check to see if the inner order is respected by the outer order in SQL or if it needs to be copied
      - i.e. does the order of the relation we are selecting FROM affect the order of the query results

* Add specs for binary relations

* Adjust reek and roodi scores down to lower thresholds

* Handle cases where an Inequality/Exclusion predicate is used (or a
  Negation wrapping an Equality/Inclusion) on an *optional* attribute.
  * Add "OR attribute IS NULL" to the statement to ensure cases when
    the value is NULL still matches.

* Make sure SQL generation specs track String object creation to ensure
  no needless Strings are created for any specific operation.
